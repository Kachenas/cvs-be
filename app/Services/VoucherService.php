<?php

namespace App\Services;

use App\Services\BaseService;
use Illuminate\Support\Arr;
use App\Models\Voucher;
use App\Models\User;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Auth;
use Carbon\Carbon;


class VoucherService extends BaseService
{
    protected $voucher;
    protected $user;

    public function __construct(Voucher $voucher,User $user)
    {
        $this->voucher = $voucher;
        $this->user = $user;
    }

    public function generateVoucher()
    {

        return $this->executeFunction(function () {
            
            $max_voucher = config('constants.options.max_generated_voucher'); //max voucher to generate per user

            $countVoucher = $this->voucher->where('user_id',Auth::user()->id)->count(); //get count of voucher generated for that user

            if($countVoucher < $max_voucher) {

                //check if user role is allowed to generate a voucher
                if (Auth::user()->user_role == 2 || Auth::user()->user_role == 3) {
                    return "This user is not allowed to generate a voucher";
                }

                $voucher = Str::random(16);
                $data = [
                    'user_id' => Auth::user()->id,
                    'voucher_code' => strtoupper($voucher),
                    'valid_to' => $date = date('Y-m-d'),
                    'valid_from' => $date = date('Y-m-d')
                ];

                $voucher = $this->voucher->create($data);

                if ($voucher) {
                    return $voucher;
                }
                return "There was a problem while generating a voucher for this user!";

            }
            return "Only a maximum of 10 Voucher can be generated by a user";

        });
    }

    public function showVouchers()
    {
        return $this->executeFunction(function () {
           
            //$user = Auth::user();
            //return $user->vouchers;
            return $this->user->showVouchers();
        });
    }

    public function deleteVoucher(array $data)
    {
        return $this->executeFunction(function () use ($data) {
        
            $voucher = $this->voucher->where('id',$data['id'])->first();

            if ($voucher != null) {
                $this->voucher->where('id',$data['id'])->delete();
                return "Voucher Deleted!";
            }
            return "Error Deleting Voucher!";
            
        });
    }
}